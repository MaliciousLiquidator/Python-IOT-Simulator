
Smart Home Automation System Documentation
-------------------------------------------

Overview:
---------
This Smart Home Automation System simulates an IoT-enabled environment. It manages a network of devices such as Smart Lights, Thermostats, and Security Cameras through a central automation system. The system features a GUI for real-time interaction and monitoring.

IoT Device Classes:
-------------------
1. SmartLight:
   - Simulates a smart light with adjustable brightness and color.
   - Methods: turn_on, turn_off, set_brightness, set_color, update_randomly.

2. Thermostat:
   - Represents a thermostat with temperature control and mode settings.
   - Methods: set_mode, set_target_temperature, update_temperature, update_randomly.

3. SecurityCamera:
   - Models a security camera with motion detection and recording capabilities.
   - Methods: enable_motion_detection, disable_motion_detection, start_recording, stop_recording, detect_motion.

Central Automation System:
--------------------------
- Manages and updates the states of the connected IoT devices.
- Methods: add_device, remove_device, get_device, update_devices, simulate.

GUI Features:
-------------
1. Device Monitoring Section:
   - Displays a list of all connected devices.
   - Users can select a device to view more details and interact with it.

2. Device Interaction Section:
   - Shows controls relevant to the selected device, allowing users to modify its settings in real-time.
   - Dynamically updates based on the device selected in the monitoring section.

Running the Simulation:
-----------------------
- Run the Python script to start the system.
- Interact with the GUI to control and monitor the devices.
- The GUI reflects real-time updates of device statuses and responds to user inputs.

Enhancements:
-------------
- The GUI has been enhanced with a dashboard for easy monitoring and interaction with devices.
- Users can now select a device from the list to view and change its settings.

Notes:
------
- The system is a simulation for educational purposes.
- Real-world applications would require additional considerations like robust error handling and security measures.
